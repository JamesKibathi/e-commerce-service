name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  test:
    name: Run Django Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Install Dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          
      - name: Decode and set environment variables
        run: |
          echo "AT_USERNAME=$(echo '${{ secrets.AT_USERNAME }}' | base64 -d)" >> $GITHUB_ENV
          echo "AT_SHORT_CODE=$(echo '${{ secrets.AT_SHORT_CODE }}' | base64 -d)" >> $GITHUB_ENV
          echo "AT_API_KEY=$(echo '${{ secrets.AT_API_KEY }}' | base64 -d)" >> $GITHUB_ENV

      - name: Run Tests
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: "localhost"  
          DB_PORT: "5432"
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          source venv/bin/activate
          pytest -v  

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/e-commerce-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/e-commerce-service:latest

  deploy:
    name: Deploy to Minikube
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Start Minikube
        uses: medyagh/setup-minikube@latest
        with:
          minikube-version: v1.35.0
          kubernetes-version: v1.32.0
      
      - name: Wait for Minikube to be ready
        run: |
          minikube status
          kubectl cluster-info

      - name: Create Kubernetes Secrets
        run: |
          kubectl create secret generic django-secrets \
            --from-literal=DB_NAME=${{ secrets.DB_NAME }} \
            --from-literal=DB_USER=${{ secrets.DB_USER }} \
            --from-literal=DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --from-literal=DB_HOST=postgres-service \
            --from-literal=DB_PORT=5432 \
            --from-literal=SECRET_KEY=${{ secrets.SECRET_KEY }}  

      - name: Log in to Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Deploy Postgres to Minikube
        run: |
          kubectl apply -f k8s/postgres.yaml --validate=false
          kubectl rollout status deployment/postgres --timeout=120s   

      - name: Wait for Postgres to be Ready
        run: |
          kubectl wait --for=condition=Ready pod -l app=postgres --timeout=180s   

      - name: Pull and Deploy Application to Minikube
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/e-commerce-service:latest 
          minikube image load ${{ secrets.DOCKER_USERNAME }}/e-commerce-service:latest  
          kubectl apply -f k8s/deployment.yaml --validate=false
          kubectl rollout status deployment/ecommerce-app --timeout=120s  

      - name: Check Deployment Status
        run: |
          kubectl get pods
          kubectl get services
          kubectl describe pod ecommerce-app
          kubectl logs deployment/ecommerce-app    

        